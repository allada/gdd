package input


import (
    "github.com/allada/gdd/protocol/shared"
)

type DispatchKeyEventCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    Type DispatchKeyEventTypeEnum `json:"type"`// Type of the key event.
    Modifiers *int64 `json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
    Timestamp *float64 `json:"timestamp,omitempty"`// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
    Text *string `json:"text,omitempty"`// Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "")
    UnmodifiedText *string `json:"unmodifiedText,omitempty"`// Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
    KeyIdentifier *string `json:"keyIdentifier,omitempty"`// Unique key identifier (e.g., 'U+0041') (default: "").
    Code *string `json:"code,omitempty"`// Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
    Key *string `json:"key,omitempty"`// Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
    WindowsVirtualKeyCode *int64 `json:"windowsVirtualKeyCode,omitempty"`// Windows virtual key code (default: 0).
    NativeVirtualKeyCode *int64 `json:"nativeVirtualKeyCode,omitempty"`// Native virtual key code (default: 0).
    AutoRepeat *bool `json:"autoRepeat,omitempty"`// Whether the event was generated from auto repeat (default: false).
    IsKeypad *bool `json:"isKeypad,omitempty"`// Whether the event was generated from the keypad (default: false).
    IsSystemKey *bool `json:"isSystemKey,omitempty"`// Whether the event was a system key event (default: false).
}
type DispatchKeyEventReturn struct {
}

func (c *DispatchKeyEventCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *DispatchKeyEventCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *DispatchKeyEventCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}

type DispatchMouseEventCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    Type DispatchMouseEventTypeEnum `json:"type"`// Type of the mouse event.
    X int64 `json:"x"`// X coordinate of the event relative to the main frame's viewport.
    Y int64 `json:"y"`// Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
    Modifiers *int64 `json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
    Timestamp *float64 `json:"timestamp,omitempty"`// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
    Button *DispatchMouseEventButtonEnum `json:"button,omitempty"`// Mouse button (default: "none").
    ClickCount *int64 `json:"clickCount,omitempty"`// Number of times the mouse button was clicked (default: 0).
}
type DispatchMouseEventReturn struct {
}

func (c *DispatchMouseEventCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *DispatchMouseEventCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *DispatchMouseEventCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}

type DispatchTouchEventCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    Type DispatchTouchEventTypeEnum `json:"type"`// Type of the touch event.
    TouchPoints []TouchPoint `json:"touchPoints"`// Touch points.
    Modifiers *int64 `json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
    Timestamp *float64 `json:"timestamp,omitempty"`// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
}
type DispatchTouchEventReturn struct {
}

func (c *DispatchTouchEventCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *DispatchTouchEventCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *DispatchTouchEventCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}

type EmulateTouchFromMouseEventCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    Type EmulateTouchFromMouseEventTypeEnum `json:"type"`// Type of the mouse event.
    X int64 `json:"x"`// X coordinate of the mouse pointer in DIP.
    Y int64 `json:"y"`// Y coordinate of the mouse pointer in DIP.
    Timestamp float64 `json:"timestamp"`// Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
    Button EmulateTouchFromMouseEventButtonEnum `json:"button"`// Mouse button.
    DeltaX *float64 `json:"deltaX,omitempty"`// X delta in DIP for mouse wheel event (default: 0).
    DeltaY *float64 `json:"deltaY,omitempty"`// Y delta in DIP for mouse wheel event (default: 0).
    Modifiers *int64 `json:"modifiers,omitempty"`// Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
    ClickCount *int64 `json:"clickCount,omitempty"`// Number of times the mouse button was clicked (default: 0).
}
type EmulateTouchFromMouseEventReturn struct {
}

func (c *EmulateTouchFromMouseEventCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *EmulateTouchFromMouseEventCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *EmulateTouchFromMouseEventCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}

type SynthesizePinchGestureCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    X int64 `json:"x"`// X coordinate of the start of the gesture in CSS pixels.
    Y int64 `json:"y"`// Y coordinate of the start of the gesture in CSS pixels.
    ScaleFactor float64 `json:"scaleFactor"`// Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
    RelativeSpeed *int64 `json:"relativeSpeed,omitempty"`// Relative pointer speed in pixels per second (default: 800).
    GestureSourceType *GestureSourceType `json:"gestureSourceType,omitempty"`// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}
type SynthesizePinchGestureReturn struct {
}

func (c *SynthesizePinchGestureCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *SynthesizePinchGestureCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *SynthesizePinchGestureCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}

type SynthesizeScrollGestureCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    X int64 `json:"x"`// X coordinate of the start of the gesture in CSS pixels.
    Y int64 `json:"y"`// Y coordinate of the start of the gesture in CSS pixels.
    XDistance *int64 `json:"xDistance,omitempty"`// The distance to scroll along the X axis (positive to scroll left).
    YDistance *int64 `json:"yDistance,omitempty"`// The distance to scroll along the Y axis (positive to scroll up).
    XOverscroll *int64 `json:"xOverscroll,omitempty"`// The number of additional pixels to scroll back along the X axis, in addition to the given distance.
    YOverscroll *int64 `json:"yOverscroll,omitempty"`// The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
    PreventFling *bool `json:"preventFling,omitempty"`// Prevent fling (default: true).
    Speed *int64 `json:"speed,omitempty"`// Swipe speed in pixels per second (default: 800).
    GestureSourceType *GestureSourceType `json:"gestureSourceType,omitempty"`// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
    RepeatCount *int64 `json:"repeatCount,omitempty"`// The number of times to repeat the gesture (default: 0).
    RepeatDelayMs *int64 `json:"repeatDelayMs,omitempty"`// The number of milliseconds delay between each repeat. (default: 250).
    InteractionMarkerName *string `json:"interactionMarkerName,omitempty"`// The name of the interaction markers to generate, if not empty (default: "").
}
type SynthesizeScrollGestureReturn struct {
}

func (c *SynthesizeScrollGestureCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *SynthesizeScrollGestureCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *SynthesizeScrollGestureCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}

type SynthesizeTapGestureCommand struct {
    DestinationTargetID string
    responseId int64
    conn *shared.Connection
    X int64 `json:"x"`// X coordinate of the start of the gesture in CSS pixels.
    Y int64 `json:"y"`// Y coordinate of the start of the gesture in CSS pixels.
    Duration *int64 `json:"duration,omitempty"`// Duration between touchdown and touchup events in ms (default: 50).
    TapCount *int64 `json:"tapCount,omitempty"`// Number of times to perform the tap (e.g. 2 for double tap, default: 1).
    GestureSourceType *GestureSourceType `json:"gestureSourceType,omitempty"`// Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}
type SynthesizeTapGestureReturn struct {
}

func (c *SynthesizeTapGestureCommand) Initalize(targetId string, responseId int64, conn *shared.Connection) {
    c.DestinationTargetID = targetId
    c.responseId = responseId
    c.conn = conn
}

func (c *SynthesizeTapGestureCommand) RespondWithError(code shared.ResponseErrorCodes, message string) {
    c.conn.SendErrorResult(c.responseId, c.DestinationTargetID, code, message)
}

func (c *SynthesizeTapGestureCommand) Respond() {
    c.conn.SendResult(c.responseId, c.DestinationTargetID, struct{}{})
}
